{"version":3,"sources":["components/PostItem/PostItem.module.css","img/like.svg","img/like-active.svg","components/App/App.module.css","components/styledComponents/Input/Input.tsx","components/styledComponents/NickName/NickName.tsx","components/styledComponents/PostTitle/PostTitle.tsx","components/styledComponents/UserName/UserName.tsx","components/styledComponents/Post/Post.tsx","components/styledComponents/Like/Like.tsx","components/PostItem/PostItem.tsx","components/PostList/PostList.tsx","utils/requestData.ts","components/App/App.tsx","hooks/useResultPostList.ts","utils/searchPost.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","Input","styled","input","NickName","p","PostTitle","h2","UserName","Post","div","Like","img","PostItem","body","title","name","username","useState","liked","setLiked","className","style","userName","likeWrap","src","likeActive","like","onClick","PostList","posts","postCount","slice","map","item","index","key","requestData","url","a","fetch","request","json","response","App","postList","setPostList","userList","setUserList","inputValue","setInputValue","result","resultPostList","setResultPostList","useEffect","post","user","userId","id","postItem","useResultPostList","setPosts","setPostCount","users","getData","window","addEventListener","e","postPage","document","getElementById","Math","round","scrollHeight","scrollY","innerHeight","wrap","placeholder","type","value","onChange","event","target","filteredPosts","matchesFilter","RegExp","filter","test","searchPost","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.07ebc1d8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"userName\":\"PostItem_userName__1AM1n\",\"likeWrap\":\"PostItem_likeWrap__1aMA2\"};","module.exports = __webpack_public_path__ + \"static/media/like.d487f420.svg\";","module.exports = __webpack_public_path__ + \"static/media/like-active.e4d97315.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"App_wrap__2Cz5K\"};","import styled from 'styled-components';\r\n\r\nexport const Input = styled.input\r\n  `\r\n    font-size: 15px;\r\n    padding: 5px;\r\n    margin: 10px;\r\n    border: solid grey 1px;\r\n    border-radius: 3px;\r\n    width: 70%;\r\n    ::placeholder;\r\n  `;\r\n","import styled from 'styled-components';\r\n\r\nexport const NickName = styled.p\r\n  `\r\n    font-size: 18px;\r\n    color: #267eca;\r\n    margin: 0;\r\n\r\n  `;\r\n","import styled from 'styled-components';\r\n\r\nexport const PostTitle = styled.h2\r\n  `\r\n    font-size: 18px;\r\n\r\n  `;\r\n","import styled from 'styled-components';\r\n\r\nexport const UserName = styled.p\r\n  `\r\n    font-size: 18px;\r\n    color: #267eca;\r\n    margin: 0;\r\n\r\n  `;\r\n","import styled from 'styled-components';\r\n\r\nexport const Post = styled.div\r\n  `\r\n    border: solid #ececec 1px;\r\n    border-radius: 10px;\r\n    background: #fff;\r\n    padding: 10px;\r\n    margin-bottom: 20px;\r\n  `;\r\n","import styled from 'styled-components';\r\n\r\nexport const Like = styled.img\r\n  `\r\n    cursor: pointer;\r\n    width: 20px;\r\n    height: 20px;\r\n  `;\r\n","import React, {FC, useState} from 'react';\r\nimport {\r\n  Post,\r\n  UserName,\r\n  NickName,\r\n  PostTitle,\r\n} from '../styledComponents';\r\nimport style from './PostItem.module.css';\r\nimport {Like} from '../styledComponents/Like/Like';\r\nimport like from '../../img/like.svg';\r\nimport likeActive from '../../img/like-active.svg';\r\n\r\ntype PostItemType = {\r\n  body: string;\r\n  title: string;\r\n  name: string;\r\n  username: string\r\n};\r\n\r\nconst PostItem: FC<PostItemType> = ({body, title, name, username}: PostItemType) => {\r\n\r\n  const [liked, setLiked] = useState(false);\r\n  const handleClick = () => {\r\n    setLiked(!liked);\r\n  }\r\n\r\n  return (\r\n    <Post>\r\n      <div className={style.userName}>\r\n        <UserName>{name}</UserName>\r\n        <span>&ensp;aka&ensp;</span>\r\n        <NickName>{username}</NickName>\r\n      </div>\r\n      <PostTitle>{title}</PostTitle>\r\n      <p>{body}</p>\r\n      <div className={style.likeWrap}>\r\n        <Like\r\n          src={liked ? likeActive : like}\r\n          onClick={() => handleClick()}\r\n        />\r\n      </div>\r\n    </Post>\r\n  );\r\n};\r\n\r\nexport default PostItem;\r\n","import React, {FC} from 'react';\r\nimport PostItem from '../PostItem/PostItem';\r\nimport {ResultPostListType} from './PostList.types';\r\n\r\ntype PostsType = {\r\n  posts: ResultPostListType[];\r\n  postCount: number;\r\n}\r\nconst PostList: FC<PostsType> = ({posts, postCount}: PostsType) => {\r\n\r\n  return (\r\n    <div>\r\n      {\r\n        posts.slice(0, postCount).map((item: ResultPostListType, index) => (\r\n          <div key={index}>\r\n            <PostItem\r\n              body={item.body}\r\n              title={item.title}\r\n              name={item.name}\r\n              username={item.username}\r\n            />\r\n          </div>\r\n        ))\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostList;\r\n","export const requestData = async <T extends object[]>(url: string): Promise<T> => {\r\n  const request = await fetch(url);\r\n  const response = await request.json();\r\n\r\n  return response;\r\n}\r\n","import React, {FC, useEffect, useState} from 'react';\r\nimport PostList from '../PostList/PostList';\r\nimport {Input} from '../styledComponents';\r\nimport {searchPost} from '../../utils/searchPost';\r\nimport {\r\n  PostListType,\r\n  ResultPostListType,\r\n  UserListType\r\n} from '../PostList/PostList.types';\r\nimport {useResultPostList} from '../../hooks/useResultPostList';\r\nimport {requestData} from '../../utils/requestData';\r\nimport style from './App.module.css';\r\n\r\nconst App: FC = () => {\r\n  const [postList, setPostList] = useState<PostListType[]>([]);\r\n  const [userList, setUserList] = useState<UserListType[]>([]);\r\n  const [inputValue, setInputValue] = useState('');\r\n  const result = useResultPostList(postList, userList);\r\n  const [posts, setPosts] = useState<ResultPostListType[]>([]);\r\n\r\n  const [postCount, setPostCount] = useState(10);\r\n\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      const posts = await requestData<PostListType[]>('https://jsonplaceholder.typicode.com/posts');\r\n      const users = await requestData<UserListType[]>('https://jsonplaceholder.typicode.com/users');\r\n\r\n      setPostList(posts);\r\n      setUserList(users);\r\n    };\r\n\r\n    getData();\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    setPosts(result);\r\n  }, [result])\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', (e)=> {\r\n      const postPage = document.getElementById('root');\r\n      if (postPage != null) {\r\n        if (Math.round(postPage.scrollHeight - window.scrollY) === window.innerHeight) {\r\n          setPostCount((postCount) => postCount + 10)\r\n        }\r\n      }\r\n    });\r\n  }, [])\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const { value } = event.target;\r\n\r\n    setInputValue(value);\r\n\r\n    const filteredPosts = searchPost(value, result);\r\n    setPosts(filteredPosts);\r\n  };\r\n\r\n  return (\r\n    <div className={style.wrap}>\r\n      <Input\r\n        placeholder='Поиск'\r\n        type='text'\r\n        value={inputValue}\r\n        onChange={handleChange}\r\n      />\r\n      <PostList posts={posts} postCount={postCount}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import {useEffect, useState} from 'react';\r\nimport {\r\n  PostListType,\r\n  UserListType,\r\n  ResultPostListType\r\n} from '../components/PostList/PostList.types';\r\n\r\nexport const useResultPostList = (postList: PostListType[], userList: UserListType[]): ResultPostListType[] => {\r\n\r\n  const [resultPostList, setResultPostList] = useState<ResultPostListType[]>([]);\r\n\r\n  useEffect(() => {\r\n    postList.map(post => {\r\n      userList.map(user => {\r\n        if (post.userId === user.id) {\r\n          const postItem = {\r\n            body: post.body,\r\n            title: post.title,\r\n            name: user.name,\r\n            username: user.username,\r\n          };\r\n          setResultPostList(resultPostList => [...resultPostList, postItem])\r\n        }\r\n      });\r\n    });\r\n  }, [postList, userList])\r\n\r\n  return resultPostList;\r\n};\r\n","import {ResultPostListType} from '../components/PostList/PostList.types';\r\n\r\nexport const searchPost = (value: string, result: ResultPostListType[]): ResultPostListType[] => {\r\n  const matchesFilter = new RegExp(value, 'i');\r\n\r\n  const filterPosts = result.filter((item) => {\r\n    return !value || matchesFilter.test(item.title)\r\n  })\r\n\r\n  return filterPosts;\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}